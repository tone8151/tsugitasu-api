# swagger: "2.0"
openapi: 3.0.0
info:
  description: "API仕様書"
  version: "2.0.0"
  title: "tsugitasu-api"
servers:
  - url: "ugdhjkc6j2.execute-api.ap-northeast-1.amazonaws.com/dev"
    variables:
      protocol:
        default: https
        enum:
          - http
          - https
tags:
  - name: "user"
    description: "ユーザーに関するオペレーション"
  - name: "create"
    description: "教材や授業の新規作成に関するオペレーション"
  - name: "retrieve"
    description: "教材や授業の取得に関するオペレーション"
paths:
  /user/entry/tmp/:
    post:
      tags:
      - "user"
      summary: "ユーザーによる仮登録"
      description: "仮登録が成功すると、送信したメールアドレス宛に確認コードが届く。nicknameは日本語でも英語でも可"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/singInInfo"
                - type: object
                  properties:
                    nickname:
                      type: string
                      example: ホゲホゲさん
      responses:
        "200":
          $ref: "#/components/responses/simpleSuccess"
        "400":
          description: "メールアドレスが既に登録されている場合"
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/messageOnlyResponse"
              example:
                message: "Email address already exists"
        "502":
          $ref: "#/components/responses/serverError"
  /user/entry/prd/:
    post:
      tags:
      - "user"
      summary: "ユーザーによる本登録"
      description: "メールアドレスに届いた確認コードを用いて本登録を行うためのエンドポイント"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                 email:
                    type: string
                    example: "hoge@example.com"
                 confirmation_code:
                    type: string
                    example: "345352"
      responses:
        "200":
          $ref: "#/components/responses/simpleSuccess"
        "400":
          description: "認証に失敗した場合"
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/messageOnlyResponse"
              examples:
                response1:
                  summary: 入力したコードが間違っている場合
                  value:
                    message: "Wrong confirmation code"
                response2:
                  summary: 時間切れなどでコードが無効な場合
                  value:
                    message: "Code is not valid"
        "502":
          $ref: "#/components/responses/serverError"
  /user/login/:
    post:
      tags:
      - "user"
      summary: "ユーザーによるログイン"
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/singInInfo"
      responses:
        "200":
          description: "ログイン成功"
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                  AccessToken:
                    type: "string"
                  RefreshToken:
                    type: "string"
                  IdToken:
                    type: "string"
              example:
                message: "Login successful"
                AccessToken: "eyJraWQiOiJ5aGJoeDdUclhpWVNDU1h....zGh4xMblotEHgbiY5_GVEPGIIWzrP5xg"
                RefreshToken: "qykPXss0Uha7fa_3IqG5FDHCawDcGJ2....99bAeeAN60WoGNL_-oPAgc6lpefefKEf"
                IdToken: "LTFfWmpMbHZ5bkRuIiwiY29nbml0b....Njg5Mi1kODE0LTRmNTgtYTA4My04ZTIyM"
        "400":
          description: "ログイン失敗"
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/messageOnlyResponse"
              examples:
                response1:
                  summary: メールアドレスかパスワードが間違っている場合
                  value:
                    message: "Login failed"
                response2:
                  summary: 仮登録は済んでいるが、本登録が済んでいないのにログインしようとした場合
                  value:
                    message: "Not confirmed"

        "502":
          $ref: "#/components/responses/serverError"
  /create/lesson/:
    post:
      tags:
      - "create"
      summary: "授業の作成"
      description: ""
      security:
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/lessons"
      responses:
        "200":
          $ref: "#/components/responses/simpleSuccess"
        "502":
          $ref: "#/components/responses/serverError"
  /retrieve/lesson/:
    get:
      tags:
      - "retrieve"
      summary: "指定したユーザーが作成した授業情報をすべて取得"
      description: ""
      security:
        - Bearer: []
      parameters:
        - name: user_id
          in: path
          description: ユーザー名を指定
          required: true
          schema:
            type: string      
          example: "1c841656"
      responses:
        "200":
          description: "取得成功"
          content:
            application/json: 
              schema:
                allOf:
                  - $ref: "#/components/schemas/lessons"
                  - type: object
                    properties:
                      lesson_id:
                        type: string
                        example: "6e0dcbd0-bf8a-4952-b519-bee4eea5c2d4"
                      created_at:
                        type: "string"           
                        example: "2022/07/29/10:46"
        "502":
          $ref: "#/components/responses/serverError"

# 共通化できる項目をまとめる              
components:
  schemas:
    lessons: 
      type: object
      properties:
        lesson_name:
          type: string
          example: "高校数学"
        created_by:
          type: string
          example: "5af86f17"
        outline:
          type: string
          example: "高校の数学の授業です"
        Public:
          type: string
          example: "Allowed"
        icon:
          type: object
          example:
            color: "Yellow"
            file_name: "hoge.svz" 
        materials:
          type: array
          example:
            - "qhptr95"
            - "jav3o39"
        tags:
          type: array
          example:
            - "高校"
            - "数学"
    singInInfo: 
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: hogehoge@gmail.com
        password:
          type: string
          example: hoge0123
    messageOnlyResponse: 
      type: object
      properties:
        message:
          type: string

  responses:
    simpleSuccess:
      description: "成功"
      content:
        application/json: 
          schema:
            $ref: "#/components/schemas/messageOnlyResponse"
          example:
            message: "successful"
    serverError:
        description: "サーバーエラー"
        content:
          application/json: 
            schema:
              $ref: "#/components/schemas/messageOnlyResponse"
            example:
              message: "Internal server error"
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: Credentials or access token for API
