{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "HelloLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simple-authorization-project-dev-hello"
      }
    },
    "TmpLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simple-authorization-project-dev-tmp"
      }
    },
    "PrdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simple-authorization-project-dev-prd"
      }
    },
    "LoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simple-authorization-project-dev-login"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "simple-authorization-project",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simple-authorization-project-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simple-authorization-project-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "simple-authorization-project",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "HelloLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/simple-authorization-project/dev/1655870489150-2022-06-22T04:01:29.150Z/simple-authorization-project.zip"
        },
        "Handler": "hello.handler",
        "Runtime": "python3.8",
        "FunctionName": "simple-authorization-project-dev-hello",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HelloLogGroup"
      ]
    },
    "TmpLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/simple-authorization-project/dev/1655870489150-2022-06-22T04:01:29.150Z/simple-authorization-project.zip"
        },
        "Handler": "entry_tmp.handler",
        "Runtime": "python3.8",
        "FunctionName": "simple-authorization-project-dev-tmp",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TmpLogGroup"
      ]
    },
    "PrdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/simple-authorization-project/dev/1655870489150-2022-06-22T04:01:29.150Z/simple-authorization-project.zip"
        },
        "Handler": "entry_prd.handler",
        "Runtime": "python3.8",
        "FunctionName": "simple-authorization-project-dev-prd",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PrdLogGroup"
      ]
    },
    "LoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/simple-authorization-project/dev/1655870489150-2022-06-22T04:01:29.150Z/simple-authorization-project.zip"
        },
        "Handler": "login.handler",
        "Runtime": "python3.8",
        "FunctionName": "simple-authorization-project-dev-login",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LoginLogGroup"
      ]
    },
    "HelloLambdaVersionwdN7SeUiabjA385vQMVGr5ZGx9wLo5gVqCdl18y8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HelloLambdaFunction"
        },
        "CodeSha256": "eDesKhSKfJF/xfwCWC3zVKjVvYCpsLdYL4BnRXTq2rI="
      }
    },
    "TmpLambdaVersioni8s2NSHsJMikGzg47tv0bDskO3gzPtFtmAxIqGCTs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TmpLambdaFunction"
        },
        "CodeSha256": "eDesKhSKfJF/xfwCWC3zVKjVvYCpsLdYL4BnRXTq2rI="
      }
    },
    "PrdLambdaVersionY3n6WlqjPIJRgsIzP3we4tUY0cvpPR5Pn3QOZrvgpU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PrdLambdaFunction"
        },
        "CodeSha256": "eDesKhSKfJF/xfwCWC3zVKjVvYCpsLdYL4BnRXTq2rI="
      }
    },
    "LoginLambdaVersionOKnh1cxpltEVjipegesMOUprHMh1AWFXw3ajsjM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LoginLambdaFunction"
        },
        "CodeSha256": "eDesKhSKfJF/xfwCWC3zVKjVvYCpsLdYL4BnRXTq2rI="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-simple-authorization-project",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceHello": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "hello",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserEntry": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "entry",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserEntryTmp": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUserEntry"
        },
        "PathPart": "tmp",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserEntryPrd": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUserEntry"
        },
        "PathPart": "prd",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserLogin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "login",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodHelloOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceHello"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodHelloGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceHello"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "ApiGatewayWithAuthorizationAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "HelloLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "HelloLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUserEntryTmpPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserEntryTmp"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TmpLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TmpLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUserEntryPrdPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserEntryPrd"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PrdLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "PrdLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUserLoginPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserLogin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LoginLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "LoginLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1655870488581": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodHelloOptions",
        "ApiGatewayMethodHelloGet",
        "ApiGatewayMethodUserEntryTmpPost",
        "ApiGatewayMethodUserEntryPrdPost",
        "ApiGatewayMethodUserLoginPost"
      ]
    },
    "HelloLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HelloLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TmpLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TmpLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PrdLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PrdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "LoginLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ApiGatewayWithAuthorizationUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_email",
              "Priority": 1
            }
          ]
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": false,
          "InviteMessageTemplate": {
            "EmailMessage": "Your username is {username} and temporary password is {####}.",
            "EmailSubject": "Your temporary password",
            "SMSMessage": "Your username is {username} and temporary password is {####}."
          }
        },
        "UsernameAttributes": [
          "email"
        ],
        "AutoVerifiedAttributes": [
          "email"
        ],
        "DeviceConfiguration": {
          "ChallengeRequiredOnNewDevice": false,
          "DeviceOnlyRememberedOnUserPrompt": true
        },
        "EmailConfiguration": {
          "EmailSendingAccount": "COGNITO_DEFAULT"
        },
        "EmailVerificationMessage": "Your verification code is {####}.",
        "EmailVerificationSubject": "Your verification code",
        "MfaConfiguration": "OFF",
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 6,
            "RequireLowercase": false,
            "RequireNumbers": false,
            "RequireSymbols": false,
            "RequireUppercase": false,
            "TemporaryPasswordValidityDays": 365
          }
        },
        "Schema": [
          {
            "AttributeDataType": "String",
            "DeveloperOnlyAttribute": false,
            "Mutable": true,
            "Name": "email",
            "Required": true
          }
        ],
        "SmsAuthenticationMessage": "Your verification code is {####}.",
        "SmsVerificationMessage": "Your verification code is {####}.",
        "UsernameConfiguration": {
          "CaseSensitive": true
        },
        "UserPoolAddOns": {
          "AdvancedSecurityMode": "AUDIT"
        },
        "UserPoolName": "simple-authorization-project-dev-user-pool",
        "UserPoolTags": {
          "Service": "simple-authorization-project-dev"
        },
        "VerificationMessageTemplate": {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "Your verification code is {####}.",
          "EmailSubject": "Your verification code",
          "SmsMessage": "Your verification code is {####}."
        }
      }
    },
    "ApiGatewayWithAuthorizationUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "CallbackURLs": [
          "http://localhost:3000"
        ],
        "ClientName": "simple-authorization-project-dev-user-pool-client",
        "DefaultRedirectURI": "http://localhost:3000",
        "ExplicitAuthFlows": [
          "ALLOW_USER_PASSWORD_AUTH",
          "ALLOW_ADMIN_USER_PASSWORD_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH"
        ],
        "LogoutURLs": [
          "http://localhost:3000"
        ],
        "PreventUserExistenceErrors": "ENABLED",
        "ReadAttributes": [
          "email"
        ],
        "RefreshTokenValidity": 10,
        "SupportedIdentityProviders": [
          "COGNITO"
        ],
        "UserPoolId": {
          "Ref": "ApiGatewayWithAuthorizationUserPool"
        },
        "WriteAttributes": [
          "email"
        ]
      }
    },
    "ApiGatewayWithAuthorizationAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "DependsOn": [
        "ApiGatewayRestApi"
      ],
      "Properties": {
        "Name": "ApiGatewayWithAuthorizationAuthorizer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "IdentitySource": "method.request.header.Authorization",
        "Type": "COGNITO_USER_POOLS",
        "ProviderARNs": [
          {
            "Fn::GetAtt": [
              "ApiGatewayWithAuthorizationUserPool",
              "Arn"
            ]
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-simple-authorization-project-dev-ServerlessDeploymentBucketName"
      }
    },
    "HelloLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HelloLambdaVersionwdN7SeUiabjA385vQMVGr5ZGx9wLo5gVqCdl18y8"
      },
      "Export": {
        "Name": "sls-simple-authorization-project-dev-HelloLambdaFunctionQualifiedArn"
      }
    },
    "TmpLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TmpLambdaVersioni8s2NSHsJMikGzg47tv0bDskO3gzPtFtmAxIqGCTs"
      },
      "Export": {
        "Name": "sls-simple-authorization-project-dev-TmpLambdaFunctionQualifiedArn"
      }
    },
    "PrdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PrdLambdaVersionY3n6WlqjPIJRgsIzP3we4tUY0cvpPR5Pn3QOZrvgpU"
      },
      "Export": {
        "Name": "sls-simple-authorization-project-dev-PrdLambdaFunctionQualifiedArn"
      }
    },
    "LoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LoginLambdaVersionOKnh1cxpltEVjipegesMOUprHMh1AWFXw3ajsjM"
      },
      "Export": {
        "Name": "sls-simple-authorization-project-dev-LoginLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-simple-authorization-project-dev-ServiceEndpoint"
      }
    },
    "CognitoUserPoolId": {
      "Value": {
        "Ref": "ApiGatewayWithAuthorizationUserPool"
      }
    },
    "CognitoUserPoolIdARN": {
      "Value": {
        "Fn::GetAtt": [
          "ApiGatewayWithAuthorizationUserPool",
          "Arn"
        ]
      }
    },
    "CognitoUserPoolClientId": {
      "Value": {
        "Ref": "ApiGatewayWithAuthorizationUserPoolClient"
      }
    }
  }
}